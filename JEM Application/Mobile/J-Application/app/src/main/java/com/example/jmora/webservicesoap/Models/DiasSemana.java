package com.example.jmora.webservicesoap.Models;

import com.example.jmora.webservicesoap.Models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DIAS_SEMANA".
 */
public class DiasSemana {

    private Long id_dia;
    private String dia;
    private Long id_grupo;
    private Long id_home;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DiasSemanaDao myDao;

    private Grupo grupo;
    private Long grupo__resolvedKey;

    private Home home;
    private Long home__resolvedKey;


    public DiasSemana() {
    }

    public DiasSemana(Long id_dia) {
        this.id_dia = id_dia;
    }

    public DiasSemana(Long id_dia, String dia, Long id_grupo, Long id_home) {
        this.id_dia = id_dia;
        this.dia = dia;
        this.id_grupo = id_grupo;
        this.id_home = id_home;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDiasSemanaDao() : null;
    }

    public Long getId_dia() {
        return id_dia;
    }

    public void setId_dia(Long id_dia) {
        this.id_dia = id_dia;
    }

    public String getDia() {
        return dia;
    }

    public void setDia(String dia) {
        this.dia = dia;
    }

    public Long getId_grupo() {
        return id_grupo;
    }

    public void setId_grupo(Long id_grupo) {
        this.id_grupo = id_grupo;
    }

    public Long getId_home() {
        return id_home;
    }

    public void setId_home(Long id_home) {
        this.id_home = id_home;
    }

    /** To-one relationship, resolved on first access. */
    public Grupo getGrupo() {
        Long __key = this.id_grupo;
        if (grupo__resolvedKey == null || !grupo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrupoDao targetDao = daoSession.getGrupoDao();
            Grupo grupoNew = targetDao.load(__key);
            synchronized (this) {
                grupo = grupoNew;
            	grupo__resolvedKey = __key;
            }
        }
        return grupo;
    }

    public void setGrupo(Grupo grupo) {
        synchronized (this) {
            this.grupo = grupo;
            id_grupo = grupo == null ? null : grupo.getId_grupo();
            grupo__resolvedKey = id_grupo;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Home getHome() {
        Long __key = this.id_home;
        if (home__resolvedKey == null || !home__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HomeDao targetDao = daoSession.getHomeDao();
            Home homeNew = targetDao.load(__key);
            synchronized (this) {
                home = homeNew;
            	home__resolvedKey = __key;
            }
        }
        return home;
    }

    public void setHome(Home home) {
        synchronized (this) {
            this.home = home;
            id_home = home == null ? null : home.getId_home();
            home__resolvedKey = id_home;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
