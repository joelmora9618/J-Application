package com.example.jmora.webservicesoap.Models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.jmora.webservicesoap.Models.GrupoEmpleado;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRUPO_EMPLEADO".
*/
public class GrupoEmpleadoDao extends AbstractDao<GrupoEmpleado, Long> {

    public static final String TABLENAME = "GRUPO_EMPLEADO";

    /**
     * Properties of entity GrupoEmpleado.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id_grupo_empleado = new Property(0, Long.class, "id_grupo_empleado", true, "ID_GRUPO_EMPLEADO");
        public final static Property Id_grupo = new Property(1, Long.class, "id_grupo", false, "ID_GRUPO");
        public final static Property Dni_empleado = new Property(2, Long.class, "dni_empleado", false, "DNI_EMPLEADO");
    };

    private DaoSession daoSession;

    private Query<GrupoEmpleado> grupo_GrupoEmpleadoQuery;
    private Query<GrupoEmpleado> empleado_GrupoEmpleadoQuery;

    public GrupoEmpleadoDao(DaoConfig config) {
        super(config);
    }
    
    public GrupoEmpleadoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRUPO_EMPLEADO\" (" + //
                "\"ID_GRUPO_EMPLEADO\" INTEGER PRIMARY KEY ," + // 0: id_grupo_empleado
                "\"ID_GRUPO\" INTEGER," + // 1: id_grupo
                "\"DNI_EMPLEADO\" INTEGER);"); // 2: dni_empleado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRUPO_EMPLEADO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GrupoEmpleado entity) {
        stmt.clearBindings();
 
        Long id_grupo_empleado = entity.getId_grupo_empleado();
        if (id_grupo_empleado != null) {
            stmt.bindLong(1, id_grupo_empleado);
        }
 
        Long id_grupo = entity.getId_grupo();
        if (id_grupo != null) {
            stmt.bindLong(2, id_grupo);
        }
 
        Long dni_empleado = entity.getDni_empleado();
        if (dni_empleado != null) {
            stmt.bindLong(3, dni_empleado);
        }
    }

    @Override
    protected void attachEntity(GrupoEmpleado entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GrupoEmpleado readEntity(Cursor cursor, int offset) {
        GrupoEmpleado entity = new GrupoEmpleado( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id_grupo_empleado
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_grupo
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // dni_empleado
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GrupoEmpleado entity, int offset) {
        entity.setId_grupo_empleado(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_grupo(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDni_empleado(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GrupoEmpleado entity, long rowId) {
        entity.setId_grupo_empleado(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GrupoEmpleado entity) {
        if(entity != null) {
            return entity.getId_grupo_empleado();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "grupoEmpleado" to-many relationship of Grupo. */
    public List<GrupoEmpleado> _queryGrupo_GrupoEmpleado(Long id_grupo) {
        synchronized (this) {
            if (grupo_GrupoEmpleadoQuery == null) {
                QueryBuilder<GrupoEmpleado> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_grupo.eq(null));
                grupo_GrupoEmpleadoQuery = queryBuilder.build();
            }
        }
        Query<GrupoEmpleado> query = grupo_GrupoEmpleadoQuery.forCurrentThread();
        query.setParameter(0, id_grupo);
        return query.list();
    }

    /** Internal query to resolve the "grupoEmpleado" to-many relationship of Empleado. */
    public List<GrupoEmpleado> _queryEmpleado_GrupoEmpleado(Long dni_empleado) {
        synchronized (this) {
            if (empleado_GrupoEmpleadoQuery == null) {
                QueryBuilder<GrupoEmpleado> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Dni_empleado.eq(null));
                empleado_GrupoEmpleadoQuery = queryBuilder.build();
            }
        }
        Query<GrupoEmpleado> query = empleado_GrupoEmpleadoQuery.forCurrentThread();
        query.setParameter(0, dni_empleado);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGrupoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEmpleadoDao().getAllColumns());
            builder.append(" FROM GRUPO_EMPLEADO T");
            builder.append(" LEFT JOIN GRUPO T0 ON T.\"ID_GRUPO\"=T0.\"ID_GRUPO\"");
            builder.append(" LEFT JOIN EMPLEADO T1 ON T.\"DNI_EMPLEADO\"=T1.\"DNI\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GrupoEmpleado loadCurrentDeep(Cursor cursor, boolean lock) {
        GrupoEmpleado entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Grupo grupo = loadCurrentOther(daoSession.getGrupoDao(), cursor, offset);
        entity.setGrupo(grupo);
        offset += daoSession.getGrupoDao().getAllColumns().length;

        Empleado empleado = loadCurrentOther(daoSession.getEmpleadoDao(), cursor, offset);
        entity.setEmpleado(empleado);

        return entity;    
    }

    public GrupoEmpleado loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GrupoEmpleado> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GrupoEmpleado> list = new ArrayList<GrupoEmpleado>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GrupoEmpleado> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GrupoEmpleado> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
