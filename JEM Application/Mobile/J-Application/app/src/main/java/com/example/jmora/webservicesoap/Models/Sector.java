package com.example.jmora.webservicesoap.Models;

import java.util.List;
import com.example.jmora.webservicesoap.Models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SECTOR".
 */
public class Sector {

    private Long id_sector;
    private String nombre_sector;
    private Long pisoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SectorDao myDao;

    private Piso piso;
    private Long piso__resolvedKey;

    private List<Empleado> empleado;

    public Sector() {
    }

    public Sector(Long id_sector) {
        this.id_sector = id_sector;
    }

    public Sector(Long id_sector, String nombre_sector, Long pisoId) {
        this.id_sector = id_sector;
        this.nombre_sector = nombre_sector;
        this.pisoId = pisoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSectorDao() : null;
    }

    public Long getId_sector() {
        return id_sector;
    }

    public void setId_sector(Long id_sector) {
        this.id_sector = id_sector;
    }

    public String getNombre_sector() {
        return nombre_sector;
    }

    public void setNombre_sector(String nombre_sector) {
        this.nombre_sector = nombre_sector;
    }

    public Long getPisoId() {
        return pisoId;
    }

    public void setPisoId(Long pisoId) {
        this.pisoId = pisoId;
    }

    /** To-one relationship, resolved on first access. */
    public Piso getPiso() {
        Long __key = this.pisoId;
        if (piso__resolvedKey == null || !piso__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PisoDao targetDao = daoSession.getPisoDao();
            Piso pisoNew = targetDao.load(__key);
            synchronized (this) {
                piso = pisoNew;
            	piso__resolvedKey = __key;
            }
        }
        return piso;
    }

    public void setPiso(Piso piso) {
        synchronized (this) {
            this.piso = piso;
            pisoId = piso == null ? null : piso.getPiso();
            piso__resolvedKey = pisoId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Empleado> getEmpleado() {
        if (empleado == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmpleadoDao targetDao = daoSession.getEmpleadoDao();
            List<Empleado> empleadoNew = targetDao._querySector_Empleado(id_sector);
            synchronized (this) {
                if(empleado == null) {
                    empleado = empleadoNew;
                }
            }
        }
        return empleado;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEmpleado() {
        empleado = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
