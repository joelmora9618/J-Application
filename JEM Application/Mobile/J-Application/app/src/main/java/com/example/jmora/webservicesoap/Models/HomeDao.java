package com.example.jmora.webservicesoap.Models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.jmora.webservicesoap.Models.Home;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME".
*/
public class HomeDao extends AbstractDao<Home, Long> {

    public static final String TABLENAME = "HOME";

    /**
     * Properties of entity Home.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id_home = new Property(0, Long.class, "id_home", true, "ID_HOME");
        public final static Property Estado = new Property(1, Integer.class, "estado", false, "ESTADO");
    };

    private DaoSession daoSession;


    public HomeDao(DaoConfig config) {
        super(config);
    }
    
    public HomeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME\" (" + //
                "\"ID_HOME\" INTEGER PRIMARY KEY ," + // 0: id_home
                "\"ESTADO\" INTEGER);"); // 1: estado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Home entity) {
        stmt.clearBindings();
 
        Long id_home = entity.getId_home();
        if (id_home != null) {
            stmt.bindLong(1, id_home);
        }
 
        Integer estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(2, estado);
        }
    }

    @Override
    protected void attachEntity(Home entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Home readEntity(Cursor cursor, int offset) {
        Home entity = new Home( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id_home
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // estado
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Home entity, int offset) {
        entity.setId_home(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEstado(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Home entity, long rowId) {
        entity.setId_home(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Home entity) {
        if(entity != null) {
            return entity.getId_home();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
