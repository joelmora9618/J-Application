package com.example.jmora.webservicesoap.Models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.jmora.webservicesoap.Models.Empleado;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLEADO".
*/
public class EmpleadoDao extends AbstractDao<Empleado, Long> {

    public static final String TABLENAME = "EMPLEADO";

    /**
     * Properties of entity Empleado.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Dni = new Property(0, Long.class, "Dni", true, "DNI");
        public final static Property Nombre = new Property(1, String.class, "Nombre", false, "NOMBRE");
        public final static Property Apellido = new Property(2, String.class, "Apellido", false, "APELLIDO");
        public final static Property Fecha_de_nacimiento = new Property(3, java.util.Date.class, "Fecha_de_nacimiento", false, "FECHA_DE_NACIMIENTO");
        public final static Property Sexo = new Property(4, String.class, "Sexo", false, "SEXO");
        public final static Property Password = new Property(5, String.class, "Password", false, "PASSWORD");
        public final static Property Id_sector = new Property(6, Long.class, "id_sector", false, "ID_SECTOR");
    };

    private DaoSession daoSession;

    private Query<Empleado> sector_EmpleadoQuery;

    public EmpleadoDao(DaoConfig config) {
        super(config);
    }
    
    public EmpleadoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLEADO\" (" + //
                "\"DNI\" INTEGER PRIMARY KEY ," + // 0: Dni
                "\"NOMBRE\" TEXT," + // 1: Nombre
                "\"APELLIDO\" TEXT," + // 2: Apellido
                "\"FECHA_DE_NACIMIENTO\" INTEGER," + // 3: Fecha_de_nacimiento
                "\"SEXO\" TEXT," + // 4: Sexo
                "\"PASSWORD\" TEXT," + // 5: Password
                "\"ID_SECTOR\" INTEGER);"); // 6: id_sector
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLEADO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Empleado entity) {
        stmt.clearBindings();
 
        Long Dni = entity.getDni();
        if (Dni != null) {
            stmt.bindLong(1, Dni);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(2, Nombre);
        }
 
        String Apellido = entity.getApellido();
        if (Apellido != null) {
            stmt.bindString(3, Apellido);
        }
 
        java.util.Date Fecha_de_nacimiento = entity.getFecha_de_nacimiento();
        if (Fecha_de_nacimiento != null) {
            stmt.bindLong(4, Fecha_de_nacimiento.getTime());
        }
 
        String Sexo = entity.getSexo();
        if (Sexo != null) {
            stmt.bindString(5, Sexo);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(6, Password);
        }
 
        Long id_sector = entity.getId_sector();
        if (id_sector != null) {
            stmt.bindLong(7, id_sector);
        }
    }

    @Override
    protected void attachEntity(Empleado entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Empleado readEntity(Cursor cursor, int offset) {
        Empleado entity = new Empleado( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Dni
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Apellido
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // Fecha_de_nacimiento
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Sexo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Password
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // id_sector
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Empleado entity, int offset) {
        entity.setDni(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApellido(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFecha_de_nacimiento(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSexo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId_sector(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Empleado entity, long rowId) {
        entity.setDni(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Empleado entity) {
        if(entity != null) {
            return entity.getDni();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "empleado" to-many relationship of Sector. */
    public List<Empleado> _querySector_Empleado(Long id_sector) {
        synchronized (this) {
            if (sector_EmpleadoQuery == null) {
                QueryBuilder<Empleado> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_sector.eq(null));
                sector_EmpleadoQuery = queryBuilder.build();
            }
        }
        Query<Empleado> query = sector_EmpleadoQuery.forCurrentThread();
        query.setParameter(0, id_sector);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSectorDao().getAllColumns());
            builder.append(" FROM EMPLEADO T");
            builder.append(" LEFT JOIN SECTOR T0 ON T.\"ID_SECTOR\"=T0.\"ID_SECTOR\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Empleado loadCurrentDeep(Cursor cursor, boolean lock) {
        Empleado entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sector sector = loadCurrentOther(daoSession.getSectorDao(), cursor, offset);
        entity.setSector(sector);

        return entity;    
    }

    public Empleado loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Empleado> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Empleado> list = new ArrayList<Empleado>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Empleado> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Empleado> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
