package com.example.jmora.webservicesoap.Models;

import com.example.jmora.webservicesoap.Models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GRUPO_EMPLEADO".
 */
public class GrupoEmpleado {

    private Long id_grupo_empleado;
    private Long id_grupo;
    private Long dni_empleado;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GrupoEmpleadoDao myDao;

    private Grupo grupo;
    private Long grupo__resolvedKey;

    private Empleado empleado;
    private Long empleado__resolvedKey;


    public GrupoEmpleado() {
    }

    public GrupoEmpleado(Long id_grupo_empleado) {
        this.id_grupo_empleado = id_grupo_empleado;
    }

    public GrupoEmpleado(Long id_grupo_empleado, Long id_grupo, Long dni_empleado) {
        this.id_grupo_empleado = id_grupo_empleado;
        this.id_grupo = id_grupo;
        this.dni_empleado = dni_empleado;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGrupoEmpleadoDao() : null;
    }

    public Long getId_grupo_empleado() {
        return id_grupo_empleado;
    }

    public void setId_grupo_empleado(Long id_grupo_empleado) {
        this.id_grupo_empleado = id_grupo_empleado;
    }

    public Long getId_grupo() {
        return id_grupo;
    }

    public void setId_grupo(Long id_grupo) {
        this.id_grupo = id_grupo;
    }

    public Long getDni_empleado() {
        return dni_empleado;
    }

    public void setDni_empleado(Long dni_empleado) {
        this.dni_empleado = dni_empleado;
    }

    /** To-one relationship, resolved on first access. */
    public Grupo getGrupo() {
        Long __key = this.id_grupo;
        if (grupo__resolvedKey == null || !grupo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrupoDao targetDao = daoSession.getGrupoDao();
            Grupo grupoNew = targetDao.load(__key);
            synchronized (this) {
                grupo = grupoNew;
            	grupo__resolvedKey = __key;
            }
        }
        return grupo;
    }

    public void setGrupo(Grupo grupo) {
        synchronized (this) {
            this.grupo = grupo;
            id_grupo = grupo == null ? null : grupo.getId_grupo();
            grupo__resolvedKey = id_grupo;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Empleado getEmpleado() {
        Long __key = this.dni_empleado;
        if (empleado__resolvedKey == null || !empleado__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmpleadoDao targetDao = daoSession.getEmpleadoDao();
            Empleado empleadoNew = targetDao.load(__key);
            synchronized (this) {
                empleado = empleadoNew;
            	empleado__resolvedKey = __key;
            }
        }
        return empleado;
    }

    public void setEmpleado(Empleado empleado) {
        synchronized (this) {
            this.empleado = empleado;
            dni_empleado = empleado == null ? null : empleado.getDni();
            empleado__resolvedKey = dni_empleado;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
