package com.example.jmora.webservicesoap.Models;

import java.util.List;
import com.example.jmora.webservicesoap.Models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PISO".
 */
public class Piso {

    private Long piso;
    private String oficina;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PisoDao myDao;

    private List<Sector> sector;

    public Piso() {
    }

    public Piso(Long piso) {
        this.piso = piso;
    }

    public Piso(Long piso, String oficina) {
        this.piso = piso;
        this.oficina = oficina;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPisoDao() : null;
    }

    public Long getPiso() {
        return piso;
    }

    public void setPiso(Long piso) {
        this.piso = piso;
    }

    public String getOficina() {
        return oficina;
    }

    public void setOficina(String oficina) {
        this.oficina = oficina;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Sector> getSector() {
        if (sector == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SectorDao targetDao = daoSession.getSectorDao();
            List<Sector> sectorNew = targetDao._queryPiso_Sector(piso);
            synchronized (this) {
                if(sector == null) {
                    sector = sectorNew;
                }
            }
        }
        return sector;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSector() {
        sector = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
