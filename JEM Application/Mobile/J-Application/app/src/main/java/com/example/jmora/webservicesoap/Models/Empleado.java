package com.example.jmora.webservicesoap.Models;

import java.util.List;
import com.example.jmora.webservicesoap.Models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "EMPLEADO".
 */
public class Empleado {

    private Long Dni;
    private String Nombre;
    private String Apellido;
    private java.util.Date Fecha_de_nacimiento;
    private String Sexo;
    private String Password;
    private Long id_sector;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EmpleadoDao myDao;

    private Sector sector;
    private Long sector__resolvedKey;

    private List<GrupoEmpleado> grupoEmpleado;

    public Empleado() {
    }

    public Empleado(Long Dni) {
        this.Dni = Dni;
    }

    public Empleado(Long Dni, String Nombre, String Apellido, java.util.Date Fecha_de_nacimiento, String Sexo, String Password, Long id_sector) {
        this.Dni = Dni;
        this.Nombre = Nombre;
        this.Apellido = Apellido;
        this.Fecha_de_nacimiento = Fecha_de_nacimiento;
        this.Sexo = Sexo;
        this.Password = Password;
        this.id_sector = id_sector;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEmpleadoDao() : null;
    }

    public Long getDni() {
        return Dni;
    }

    public void setDni(Long Dni) {
        this.Dni = Dni;
    }

    public String getNombre() {
        return Nombre;
    }

    public void setNombre(String Nombre) {
        this.Nombre = Nombre;
    }

    public String getApellido() {
        return Apellido;
    }

    public void setApellido(String Apellido) {
        this.Apellido = Apellido;
    }

    public java.util.Date getFecha_de_nacimiento() {
        return Fecha_de_nacimiento;
    }

    public void setFecha_de_nacimiento(java.util.Date Fecha_de_nacimiento) {
        this.Fecha_de_nacimiento = Fecha_de_nacimiento;
    }

    public String getSexo() {
        return Sexo;
    }

    public void setSexo(String Sexo) {
        this.Sexo = Sexo;
    }

    public String getPassword() {
        return Password;
    }

    public void setPassword(String Password) {
        this.Password = Password;
    }

    public Long getId_sector() {
        return id_sector;
    }

    public void setId_sector(Long id_sector) {
        this.id_sector = id_sector;
    }

    /** To-one relationship, resolved on first access. */
    public Sector getSector() {
        Long __key = this.id_sector;
        if (sector__resolvedKey == null || !sector__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SectorDao targetDao = daoSession.getSectorDao();
            Sector sectorNew = targetDao.load(__key);
            synchronized (this) {
                sector = sectorNew;
            	sector__resolvedKey = __key;
            }
        }
        return sector;
    }

    public void setSector(Sector sector) {
        synchronized (this) {
            this.sector = sector;
            id_sector = sector == null ? null : sector.getId_sector();
            sector__resolvedKey = id_sector;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GrupoEmpleado> getGrupoEmpleado() {
        if (grupoEmpleado == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrupoEmpleadoDao targetDao = daoSession.getGrupoEmpleadoDao();
            List<GrupoEmpleado> grupoEmpleadoNew = targetDao._queryEmpleado_GrupoEmpleado(Dni);
            synchronized (this) {
                if(grupoEmpleado == null) {
                    grupoEmpleado = grupoEmpleadoNew;
                }
            }
        }
        return grupoEmpleado;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGrupoEmpleado() {
        grupoEmpleado = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
