package com.example.jmora.webservicesoap.Models;

import java.util.List;
import com.example.jmora.webservicesoap.Models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GRUPO".
 */
public class Grupo {

    private Long id_grupo;
    private String nombre_grupo;
    private Integer estado;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GrupoDao myDao;

    private List<GrupoEmpleado> grupoEmpleado;
    private List<DiasSemana> diasSemana;

    public Grupo() {
    }

    public Grupo(Long id_grupo) {
        this.id_grupo = id_grupo;
    }

    public Grupo(Long id_grupo, String nombre_grupo, Integer estado) {
        this.id_grupo = id_grupo;
        this.nombre_grupo = nombre_grupo;
        this.estado = estado;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGrupoDao() : null;
    }

    public Long getId_grupo() {
        return id_grupo;
    }

    public void setId_grupo(Long id_grupo) {
        this.id_grupo = id_grupo;
    }

    public String getNombre_grupo() {
        return nombre_grupo;
    }

    public void setNombre_grupo(String nombre_grupo) {
        this.nombre_grupo = nombre_grupo;
    }

    public Integer getEstado() {
        return estado;
    }

    public void setEstado(Integer estado) {
        this.estado = estado;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GrupoEmpleado> getGrupoEmpleado() {
        if (grupoEmpleado == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrupoEmpleadoDao targetDao = daoSession.getGrupoEmpleadoDao();
            List<GrupoEmpleado> grupoEmpleadoNew = targetDao._queryGrupo_GrupoEmpleado(id_grupo);
            synchronized (this) {
                if(grupoEmpleado == null) {
                    grupoEmpleado = grupoEmpleadoNew;
                }
            }
        }
        return grupoEmpleado;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGrupoEmpleado() {
        grupoEmpleado = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DiasSemana> getDiasSemana() {
        if (diasSemana == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DiasSemanaDao targetDao = daoSession.getDiasSemanaDao();
            List<DiasSemana> diasSemanaNew = targetDao._queryGrupo_DiasSemana(id_grupo);
            synchronized (this) {
                if(diasSemana == null) {
                    diasSemana = diasSemanaNew;
                }
            }
        }
        return diasSemana;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDiasSemana() {
        diasSemana = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
