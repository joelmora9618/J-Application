package com.example.jmora.webservicesoap.Models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.jmora.webservicesoap.Models.EmpleadoQueue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLEADO_QUEUE".
*/
public class EmpleadoQueueDao extends AbstractDao<EmpleadoQueue, Long> {

    public static final String TABLENAME = "EMPLEADO_QUEUE";

    /**
     * Properties of entity EmpleadoQueue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Dni_empleado = new Property(0, Long.class, "dni_empleado", true, "DNI_EMPLEADO");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Apellido = new Property(2, String.class, "apellido", false, "APELLIDO");
        public final static Property Fecha_de_nacimiento = new Property(3, java.util.Date.class, "fecha_de_nacimiento", false, "FECHA_DE_NACIMIENTO");
        public final static Property Sexo = new Property(4, String.class, "sexo", false, "SEXO");
        public final static Property Id_sector = new Property(5, Long.class, "id_sector", false, "ID_SECTOR");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
    };


    public EmpleadoQueueDao(DaoConfig config) {
        super(config);
    }
    
    public EmpleadoQueueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLEADO_QUEUE\" (" + //
                "\"DNI_EMPLEADO\" INTEGER PRIMARY KEY ," + // 0: dni_empleado
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"APELLIDO\" TEXT," + // 2: apellido
                "\"FECHA_DE_NACIMIENTO\" INTEGER," + // 3: fecha_de_nacimiento
                "\"SEXO\" TEXT," + // 4: sexo
                "\"ID_SECTOR\" INTEGER," + // 5: id_sector
                "\"PASSWORD\" TEXT);"); // 6: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLEADO_QUEUE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EmpleadoQueue entity) {
        stmt.clearBindings();
 
        Long dni_empleado = entity.getDni_empleado();
        if (dni_empleado != null) {
            stmt.bindLong(1, dni_empleado);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String apellido = entity.getApellido();
        if (apellido != null) {
            stmt.bindString(3, apellido);
        }
 
        java.util.Date fecha_de_nacimiento = entity.getFecha_de_nacimiento();
        if (fecha_de_nacimiento != null) {
            stmt.bindLong(4, fecha_de_nacimiento.getTime());
        }
 
        String sexo = entity.getSexo();
        if (sexo != null) {
            stmt.bindString(5, sexo);
        }
 
        Long id_sector = entity.getId_sector();
        if (id_sector != null) {
            stmt.bindLong(6, id_sector);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EmpleadoQueue readEntity(Cursor cursor, int offset) {
        EmpleadoQueue entity = new EmpleadoQueue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dni_empleado
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apellido
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // fecha_de_nacimiento
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sexo
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // id_sector
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EmpleadoQueue entity, int offset) {
        entity.setDni_empleado(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApellido(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFecha_de_nacimiento(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSexo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId_sector(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EmpleadoQueue entity, long rowId) {
        entity.setDni_empleado(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EmpleadoQueue entity) {
        if(entity != null) {
            return entity.getDni_empleado();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
