package com.example.jmora.webservicesoap.Models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.jmora.webservicesoap.Models.DiasSemana;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIAS_SEMANA".
*/
public class DiasSemanaDao extends AbstractDao<DiasSemana, Long> {

    public static final String TABLENAME = "DIAS_SEMANA";

    /**
     * Properties of entity DiasSemana.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id_dia = new Property(0, Long.class, "id_dia", true, "ID_DIA");
        public final static Property Dia = new Property(1, String.class, "dia", false, "DIA");
        public final static Property Id_grupo = new Property(2, Long.class, "id_grupo", false, "ID_GRUPO");
        public final static Property Id_home = new Property(3, Long.class, "id_home", false, "ID_HOME");
    };

    private DaoSession daoSession;

    private Query<DiasSemana> grupo_DiasSemanaQuery;
    private Query<DiasSemana> home_DiasSemanaQuery;

    public DiasSemanaDao(DaoConfig config) {
        super(config);
    }
    
    public DiasSemanaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIAS_SEMANA\" (" + //
                "\"ID_DIA\" INTEGER PRIMARY KEY ," + // 0: id_dia
                "\"DIA\" TEXT," + // 1: dia
                "\"ID_GRUPO\" INTEGER," + // 2: id_grupo
                "\"ID_HOME\" INTEGER);"); // 3: id_home
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIAS_SEMANA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DiasSemana entity) {
        stmt.clearBindings();
 
        Long id_dia = entity.getId_dia();
        if (id_dia != null) {
            stmt.bindLong(1, id_dia);
        }
 
        String dia = entity.getDia();
        if (dia != null) {
            stmt.bindString(2, dia);
        }
 
        Long id_grupo = entity.getId_grupo();
        if (id_grupo != null) {
            stmt.bindLong(3, id_grupo);
        }
 
        Long id_home = entity.getId_home();
        if (id_home != null) {
            stmt.bindLong(4, id_home);
        }
    }

    @Override
    protected void attachEntity(DiasSemana entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DiasSemana readEntity(Cursor cursor, int offset) {
        DiasSemana entity = new DiasSemana( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id_dia
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dia
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id_grupo
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // id_home
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DiasSemana entity, int offset) {
        entity.setId_dia(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDia(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId_grupo(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setId_home(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DiasSemana entity, long rowId) {
        entity.setId_dia(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DiasSemana entity) {
        if(entity != null) {
            return entity.getId_dia();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "diasSemana" to-many relationship of Grupo. */
    public List<DiasSemana> _queryGrupo_DiasSemana(Long id_grupo) {
        synchronized (this) {
            if (grupo_DiasSemanaQuery == null) {
                QueryBuilder<DiasSemana> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_grupo.eq(null));
                grupo_DiasSemanaQuery = queryBuilder.build();
            }
        }
        Query<DiasSemana> query = grupo_DiasSemanaQuery.forCurrentThread();
        query.setParameter(0, id_grupo);
        return query.list();
    }

    /** Internal query to resolve the "diasSemana" to-many relationship of Home. */
    public List<DiasSemana> _queryHome_DiasSemana(Long id_home) {
        synchronized (this) {
            if (home_DiasSemanaQuery == null) {
                QueryBuilder<DiasSemana> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_home.eq(null));
                home_DiasSemanaQuery = queryBuilder.build();
            }
        }
        Query<DiasSemana> query = home_DiasSemanaQuery.forCurrentThread();
        query.setParameter(0, id_home);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGrupoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getHomeDao().getAllColumns());
            builder.append(" FROM DIAS_SEMANA T");
            builder.append(" LEFT JOIN GRUPO T0 ON T.\"ID_GRUPO\"=T0.\"ID_GRUPO\"");
            builder.append(" LEFT JOIN HOME T1 ON T.\"ID_HOME\"=T1.\"ID_HOME\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DiasSemana loadCurrentDeep(Cursor cursor, boolean lock) {
        DiasSemana entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Grupo grupo = loadCurrentOther(daoSession.getGrupoDao(), cursor, offset);
        entity.setGrupo(grupo);
        offset += daoSession.getGrupoDao().getAllColumns().length;

        Home home = loadCurrentOther(daoSession.getHomeDao(), cursor, offset);
        entity.setHome(home);

        return entity;    
    }

    public DiasSemana loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DiasSemana> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DiasSemana> list = new ArrayList<DiasSemana>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DiasSemana> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DiasSemana> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
